{"name":"Termostat","type":"virtual_device","properties":{"deviceIcon":0,"categories":"[\"other\"]","currentIcon":"0","log":"","logTemp":"","mainLoop":"local device = fibaro:getSelfId();\n\n\n--local piec = fibaro:getGlobal(\"Piec\");\n\n-- local tempParter = fibaro:getGlobal(\"SetTempParter\")\nlocal tempPietro = fibaro:getGlobal(\"SetTempPietro\")\n--local avgParter = fibaro:getGlobal(\"AvgTempParter\")\nlocal avgPietro = fibaro:getGlobal(\"AvgTempPietro\")\nlocal status = fibaro:getGlobal(\"Status\")\nlocal piec = fibaro:getGlobal(\"Piec\")\nlocal switchPointValve = fibaro:getGlobal(\"switchPointValve\")\nlocal tempZewn = fibaro:getValue(3, \"Temperature\")\n\n--tab = { 55, 70, 120, 47, 51, 74 }\ntab = fibaro:getDevicesId({type = \"com.fibaro.setPoint\"})\n\n--tab1 = fibaro:getDevicesId({type = \"com.fibaro.temperatureSensor\", enabled = \"true\" })\n\nDebug = function ( color, message )\n  fibaro:debug(string.format('<%s style=\"color:%s;\">%s', \"span\", color, message))\nend\n\nRemoveDeadNodes = function(tab)\ntab_new = tab\n  \tfor k,v in ipairs(tab)\n\t\tdo\n\t\t--value = tonumber(fibaro:getValue(v, \"value\"))\n    \tisDead =  fibaro:getValue(v, \"dead\");\n    \t\n    \tif (isDead == '1')\n      \t\tthen\n      \t\tdesc = fibaro:getValue(v , 'userDescription');\n      \t\tDebug(\"red\", 'Device is dead: ' .. v .. ' ' .. desc)\n      \t\ttable.remove(tab_new, k)\n      \tend\n    end\n\treturn tab_new\nend\n\nRemoveOffNodes = function(tab)\ntab_new = tab\n  \tfor k,v in ipairs(tab)\n\t\tdo\n\t\t--value = tonumber(fibaro:getValue(v, \"value\"))\n    \tisOff =  fibaro:getValue(v + 2, \"mode\");\n    \tif (isOff == '0')\n      \t\tthen\n      \t\tdesc = fibaro:getValue(v , 'userDescription');\n      \t\tDebug(\"red\", 'Device is off: ' .. v .. ' ' .. desc )\n      \t\ttable.remove(tab_new, k)\n      \tend\n    end\n\treturn tab_new\nend\n\nCalculateAverageImp = function(tab)\nlocal sum = 0\nlocal count = 0 \nlocal avg = 0\nlocal value = 0\nlocal response = 1 --If all nodes are dead or off, then by default it will be off\ntab = RemoveOffNodes(tab)\ntab = RemoveDeadNodes(tab)  \n\tfor k,v in ipairs(tab)\n\t\tdo\n\t\tdesc = fibaro:getValue(v , 'userDescription');\n    \tisOff =  tonumber(fibaro:getValue(v + 2, \"mode\"));\n    \tisDead =  tonumber(fibaro:getValue(v, \"dead\"));\n    \ttargetTemp = tonumber(fibaro:getValue(v, \"value\"))\n    \tcurrentTemp = tonumber(fibaro:getValue(v+1, \"value\"))\n    \tif (isOff == 0)\n      \t\tthen\n\t\t    \tDebug('red', desc .. ' is off ' .. isOff)\n      \tend\n\t\t\n    \tif(isDead == 1)\n      \t\tthen\n\t\t    \tDebug('red', desc .. 'is dead ' .. isDead)\n      \tend\n\t\t\n    \tif (ifOff ~= 0 and isDead ~= 1)\n\t\t\tthen\n\t   \t\t\t--Debug(\"orange\", 'getting value from device: ' .. desc .. ' ' .. isOff .. ' ' .. isDead  )\n\t\t\t\t--Debug( 'yellow', 'target ' .. targetTemp .. ' desc ' .. desc)\n      \t\t\t--Debug( 'yellow', 'current ' .. currentTemp) \n\t\t\t\t--value=currentTemp/targetTemp\n    \t\t\tvalue=targetTemp/currentTemp\n      \t\t\t--Debug( 'white', 'value ' .. value) \n    \t\t\tsum = sum + value\n     \t\t\t--Debug( 'white', 'sum ' .. sum) \n     \t\t\t--sum = sum + tonumber(fibaro:getValue(v, \"value\"));\n\t\t\t\tcount = count + 1\n\t\tend\n    end\n  --response = (math.floor(sum/count * 100)/100)\n  response = tonumber(sum/count)\n  return  string.format(\"%.2f\",response)\nend\n\n\n--CalculateAverageWithoutDeadNodesImp = function(tab)\n--  local tab_new = RemoveDeadNodes(tab)\n--  tab_new2 = RemoveOffNodes(tab_new)\n--return CalculateAverageImp(tab_new2)\n--end \n\n\n--ratio3 = tonumber(CalculateAverageWithoutDeadNodesImp(tab))\n--Debug(\"white\", string.format(\"%.2f\",ratio))\nratio = tonumber(CalculateAverageImp(tab))\nDebug('yellow', ratio)\n--fibaro:call(device, \"setProperty\", \"ui.Label1.value\", tempParter)\n\nfibaro:call(device, \"setProperty\", \"ui.Label2.value\", tempPietro)\n\nfibaro:call(device, \"setProperty\", \"ui.Label3.value\", piec)\n\n--fibaro:call(device, \"setProperty\", \"ui.Label4.value\", avgParter)\n\nfibaro:call(device, \"setProperty\", \"ui.Label5.value\", avgPietro)\n\nfibaro:call(device, \"setProperty\", \"ui.Label6.value\", ratio)\n\nfibaro:call(device, \"setProperty\", \"ui.Label7.value\", status)\n\nfibaro:call(device, \"setProperty\", \"ui.Label8.value\", switchPointValve)\n\nTargetVsCurrent = CalculateAverageImp(tab)\n\nfibaro:call(device, \"setProperty\", \"ui.Label9.value\", TargetVsCurrent)\n--fibaro:debug(TempVsTargetTemp)\n\nfibaro:setGlobal(\"TargetVsCurrent\", TargetVsCurrent)","ui.Label3.value":"ON","ui.Label7.value":"Grzanie","ui.Label8.value":"19.5","ui.Label9.value":"3.28","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"TargetVsCurrent","name":"Label9","favourite":false,"main":true}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"-0.5st","name":"Button31","empty":false,"msg":"local device = fibaro:getSelfId();\n\nlocal value = fibaro:getValue(device, \"ui.Label2.value\")\n\nif ( tonumber(value) < 10 )\n  then\n  \tfibaro:debug(\"Temp too high\");\n  \tfibaro:setGlobal(\"SetTempPietro\",10)\n  \tfibaro:call(device, \"setProperty\", \"ui.Label2.value\", 10)\n  else\n  fibaro:setGlobal(\"SetTempPietro\",value - 0.5 )\n  fibaro:call(device, \"setProperty\", \"ui.Label2.value\", value - 0.5)\nend","buttonIcon":0,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"+0.5st","name":"Button32","empty":false,"msg":"local device = fibaro:getSelfId();\n\nlocal value = fibaro:getValue(device, \"ui.Label2.value\")\n\nif ( tonumber(value) > 25 )\n  then\n  \tfibaro:debug(\"Temp too high\");\n  \tfibaro:setGlobal(\"Pietro\",20)\n  \tfibaro:call(device, \"setProperty\", \"ui.Label2.value\", 20)\n  else\n  fibaro:setGlobal(\"SetTempPietro\",value + 0.5)\n  fibaro:call(device, \"setProperty\", \"ui.Label2.value\", value + 0.5)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"Status piec","name":"Label3","favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"switchPoint","name":"Label8","favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"Zimniej","name":"Button41","empty":false,"msg":"local device = fibaro:getSelfId();\n\nlocal value = fibaro:getGlobal(\"switchPointValve\")\n\n\nmaxValue = tonumber(1.5)\nif ( tonumber(value) > maxValue )\n  then\n  \tfibaro:debug(\"Switch point too high \");\n  \tfibaro:setGlobal(\"switchPointValve\",maxValue)\n  \tfibaro:call(device, \"setProperty\", \"ui.Label8.value\", maxValue)\n  else\n  newValue = value + 0.01\n  fibaro:setGlobal(\"switchPointValve\",newValue)\n  fibaro:call(device, \"setProperty\", \"ui.Label8.value\", newValue)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"Cieplej","name":"Button42","empty":false,"msg":"local device = fibaro:getSelfId();\n\nlocal value = fibaro:getGlobal(\"switchPointValve\")\n\n\nminValue = tonumber(0.9)\nif ( tonumber(value) < minValue )\n  then\n  \tfibaro:debug(\"Switch point too low \");\n  \tfibaro:setGlobal(\"switchPointValve\",minValue)\n  \tfibaro:call(device, \"setProperty\", \"ui.Label8.value\", minValue)\n  else\n  newValue = value - 0.01\n  fibaro:setGlobal(\"switchPointValve\",newValue )\n  fibaro:call(device, \"setProperty\", \"ui.Label8.value\", newValue )\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"Status","name":"Label7","favourite":false,"main":false}]},{"type":"button","elements":[{"id":9,"lua":true,"waitForResponse":false,"caption":"Wietrzenie","name":"WietrzenieON","empty":false,"msg":"--tab = { 55, 70, 120, 47, 51, 74 }\n--tab = {51, 70, 55, 120, 47, 14, 74 }\ntab = fibaro:getDevicesId({type = \"com.fibaro.setPoint\"})\npiecId = 87\nheatingType = 0\nSetMode = function(tab, heatingType)\n\tfor k,v in ipairs(tab)\n\t\tdo\n  \t\tdevice = v + 2 \n    \tfibaro:debug(\"Setting heatting type to \" .. heatingType ..\" on \" ..device)\n    \tfibaro:call(device, \"setMode\", heatingType);\n    \tfibaro:setSceneEnabled(70, false);\n    \tfibaro:killScenes(70);\n    \tfibaro:call(piecId, \"pressButton\", 3)\n    \tfibaro:setGlobal(\"Piec\",\"OFF\")\n    \n  \t\t\n\tend\nend\n\nSetMode(tab, heatingType)\n--fibaro:call(device, \"setProperty\", \"ui.Label7.value\", \"Wietrzenie\")\nfibaro:setGlobal(\"Status\", \"Wietrzenie\")","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"Grzanie","name":"Grzanie","empty":false,"msg":"--tab = { 55, 70, 120, 47, 51, 74 }\n--tab = {51, 70, 55, 120, 47, 14, 74 }\ntab = fibaro:getDevicesId({type = \"com.fibaro.setPoint\"})\n\n\nheatingType = 1\nSetMode = function(tab, heatingType)\n\tfor k,v in ipairs(tab)\n\t\tdo\n  \t\tdevice = v + 2 \n    \tfibaro:debug(\"Setting heatting type to \" .. heatingType ..\" on \" ..device)\n    \tfibaro:call(device, \"setMode\", heatingType);\n  \t\tfibaro:setSceneEnabled(70, true);\n\tend\nend\n\n\nSetMode(tab, heatingType)\n--fibaro:call(device, \"setProperty\", \"ui.Label7.value\", \"Grzanie\")\nfibaro:setGlobal(\"Status\", \"Grzanie\")","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}